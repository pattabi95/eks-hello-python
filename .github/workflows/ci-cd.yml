name: CI/CD Pipeline  

on:
  push:
    branches:
      - main

env: 
  AWS_REGION: ${{ secrets.AWS_REGION  }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  EKS_CLUSTER: ${{ secrets.EKS_CLUSTER }}
  IMAGE_TAG: ${{ github.sha }}

jobs: 
  build-and-push:
    name: Build and Push Docker image to ECR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Build Docker image
        run: |
         docker build -t $ECR_REPOSITORY:$IMAGE_TAG ./app

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: $AWS_REGION
          role-session-name: github-actions

      - name: Login to AWS ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPOSITORY  
      
      - name: Push Docker image to ECR
        run: |
          docker tag $ECR_REPOSITORY:$IMAGE_TAG

      - name: Trivy image scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: $ECR_REPOSITORY:$IMAGE_TAG
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
      
      - name: Get app secrets from AWS Secrets Manager
        id: secrets
        run: |
          SECRET_JSON=$(aws secretsmanager get-secret-value --secret-id ${{ secrets.AWS_SECRET_NAME }} --query SecretString --output text)
          echo: "::add-mask::$SECRET_JSON"
          echo: "SECRET_JSON=$SECRET_JSON" >> $GITHUB_ENV

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER      

      - name: Create/Update k8s secret
        run: |
          kubectl create secret generic hello-world-secrets \
          --from-literal=SECRET_KEY=$( echo $SECRET_JSON | jq -r .SECRET_KEY ) \
          --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy to EKS cluster using helm  
        run: |
          helm upgrade --install hello-world ./helm \
          --set image.repository=$ECR_REPOSITORY \
          --set image.tag=$IMAGE_TAG \
      
      - name: Apply Promethues and Grafana manifests
        run: |
          kubectl apply -f ./k8s-manifests/prometheus.yml
          kubectl apply -f ./k8s-manifests/grafana.yml